---

- hosts: webservers
  user: vagrant
  sudo: True

  vars:
    application: longboxed

  # vars_files:
  #     - vars/initial_provision_vars.yml

  tasks:
    - name: System | Add supervisor group to system
      group: name=supervisor state=present

    - name: System | Add user to supervisor group
      user: name={{ansible_ssh_user}} group=supervisor

    - name: System | Update repositories (apt-get update)
      apt: update_cache=yes

    - name: Apt | Install initial packages
      action: apt pkg=$item state=installed
      with_items:
        - build-essential
        - python-software-properties

    - name: Apt | Add postgresql repo
      action: apt_repository repo='deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main' state=present

    - name: Apt | Add nginx ppa
      action: apt_repository repo=ppa:nginx/stable state=present

    - name: Apt | Install common packages needed for python application development
      action: apt pkg=$item state=installed force=yes
      with_items:
        - python-dev
        - python-setuptools
        - postgresql
        - libpq-dev
        - python-psycopg2
        - git-core
        - nginx
        - zlib1g-dev
        - redis-server
        - libmagickwand-dev

    - name: pip | Install pip
      action: easy_install name=pip

    - name: pip | Install various libraries with pip
      action: pip name=$item
      with_items:
        - virtualenv
        - virtualenvwrapper

    - name: System | move bash .profile file into place (for virtualenvwrapper)
      template: src=templates/bash_profile dest=/home/{{ansible_ssh_user}}/.profile

    ##
    # MySQL database setup.
    #
    # 'localhost' needs to be the last item for idempotency, see
    #  http://ansible.cc/docs/modules.html#mysql-user
    # - name: MySQL | Update MySQL root password for all root accounts
    #   mysql_user: name=root host=$item password=$mysql_root_password
    #   with_items:
    #     - $ansible_hostname
    #     - 127.0.0.1
    #     - ::1
    #     - localhost

    # - name: MySQL | copy .my.cnf file with root password credentials
    #   template: src=templates/my.cnf.j2 dest=/root/.my.cnf owner=root mode=0600

    # - name: MySQL | Delete anonymous MySQL server user for $server_hostname
    #   action: mysql_user user="" host="$server_hostname" state="absent"

    # - name: MySQL | Delete anonymous MySQL server user for localhost
    #   action: mysql_user user="" state="absent"

    # - name: MySQL | Remove the MySQL test database
    #   action: mysql_db db=test state=absent

    # - name: MySQL | Make sure application database exists in mysql
    #   mysql_db: name=${application}
    #             login_host=localhost
    #             login_user=root
    #             login_password=${mysql_root_password}
    #             state=present

    ##
    # Postgres Stuff
    #
    # - name: add postgres user to admin group
    #   action: user name=postgres groups=admin append=yes

    # - name: update postgres db configuration
    #   action: copy src=templates/postgresql.conf dest=/etc/postgresql/9.3/main/postgresql.conf
    #   notify:
    #     - restart postgresql

    # - name: update postgres client configuration
    #   action: copy src=templates/pg_hba.conf dest=/etc/postgresql/9.3/main/pg_hba.conf
    #   notify:
    #     - restart postgresql

    ##
    # Install Supervisor and WSGI
    #
    - name: Supervisor | Install Supervisor with pip
      pip: name=supervisor extra_args=--pre

    - name: uWSGI | Install uWSGI
      pip: name=uwsgi

    ##
    # Nginx setup
    #
    - name: Nginx | Remove default nginx site
      action: file path=/etc/nginx/sites-enabled/default state=absent

    - name: Nginx | Write nginx.conf
      action: template src=templates/nginx.conf dest=/etc/nginx/nginx.conf

    - name: Nginx | Start Nginx at boot
      service: name=nginx state=started enabled=yes

    ##
    # Supervisor setup
    #
    - name: Supervisor | Create supervisord config folder
      action: file dest=/etc/supervisor state=directory owner=root

    - name: Supervisor | Create supervisord config
      action: template src=templates/supervisord.conf dest=/etc/supervisord.conf

    - name: Supervisor | Create supervisord init script
      action: template src=templates/supervisord.sh dest=/etc/init.d/supervisord mode=0755

    - name: Supervisor | Start supervisord service and have it run during system startup
      action: service name=supervisord state=started enabled=yes

- hosts: webservers
  user: vagrant
  sudo: yes
  sudo_user: postgres
  gather_facts: no

  vars:
      dbname: longboxed
      dbuser: app_user
      dbpassword: password

  tasks:
    - name: ensure database is created
      action: postgresql_db db={{dbname}}

    - name: ensure user has access to database
      action: postgresql_user db={{dbname}} user={{dbuser}} password={{dbpassword}} priv=ALL

    - name: ensure user does not have unnecessary privilege
      action: postgresql_user user={{dbuser}} role_attr_flags=NOSUPERUSER,NOCREATEDB